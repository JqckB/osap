#!/usr/bin/perl -T --  # -*-Perl-*-
use Socket;
use IO::Handle;
use Sys::Syslog qw(:standard :extended);
use DB_File;
use Time::HiRes qw(setitimer ITIMER_REAL);

#----------------------------------------------------------------------
# Configuration
#
$name='/tmp/osap.socket';
$table='osap_users';
$db='/var/db/osap.db';
$log_facility=LOG_LOCAL4;
$httpd_user='www';

#----------------------------------------------------------------------
# sanitize environment
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/sbin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#----------------------------------------------------------------------
# Handler of cleanup timer - just mark that cleanup is needed
#
sub timerHandler {
	$do_clean++;
}

#----------------------------------------------------------------------
# Sanitize IP addresses
#
sub check_ip {
	my $addr = $_[0];

	if ($addr =~ /^(\d+\.\d+\.\d+\.\d+)$/) {
		return $1;
	} else {
		return undef;
	}
}

#----------------------------------------------------------------------
# Get the 'leased' table from pf
#
sub get_leases {
	my %leases;

	$cmd = "/sbin/pfctl -tleased -Ts";
	if (!open PFCTL, "$cmd|") {
		syslog(LOG_ERR, "pfctl: $!");
		return;
	}
	my $i=0;
	while (<PFCTL>) {
		my $l = $_;
		$l =~  s/^ +//;
		chomp $l;
		$leases{$l} = 1;
	}
	close PFCTL;
	return %leases;
}

#----------------------------------------------------------------------
# Clean db
#
sub clean_db {
	my %leases = get_leases;
	
	foreach $a (keys %osapdb) {
		# Remove addresses that are not in leased table
		if (!$leases{$a}) {
			$a = check_ip($a);
			syslog(LOG_INFO, "Clean $a $osapdb{$a}");
			my $cmd = "/sbin/pfctl -q -t $table -T delete $a";
			my $result = `$cmd 2>&1`;
			if ($result ne '') {
				syslog(LOG_ERR, "deleting $ip");
			}
			delete($osapdb{$a});
		}
	}
	# mark done
	$do_clean = 0;
}

#----------------------------------------------------------------------
#
# Main code
#

# Init syslog
setlogsock('unix');
openlog('osapd', "ndelay,pid", $log_facility);
syslog(LOG_INFO, "osapd ready");

# Create the socket
unlink($name);
socket(Server, PF_UNIX, SOCK_STREAM, 0) || die ("osapd: socket: $!");
bind(Server, sockaddr_un($name)) || die("osapd: bind: $!");
($login,$pass,$uid,$gid) = getpwnam($httpd_user);
chown($uid, $gid, $name);
chmod(0700, $name) || die("osapd: chmod $!");
listen(Server, SOMAXCONN) || die("osapd: listen: $!");

# open DB
$db = tie(%osapdb, 'DB_File', $db, O_CREAT|O_RDWR, 0600, $DB_HASH) 
  || die("osapd: tie: $!");

# restore pf table
foreach $ip (keys %osapdb) {
	$ip = check_ip($ip);
	my $cmd = "/sbin/pfctl -q -t $table -T add $ip";
	my $result = `$cmd 2>&1`;
	if ($result ne '') {
		syslog(LOG_ERR, "adding $ip");
	}
	syslog(LOG_DEBUG, "restoring '$ip' '$user'");
}

# timer
$SIG{ALRM} = 'timerHandler';
setitimer(ITIMER_REAL, 60, 60);

syslog(LOG_DEBUG, "Waiting for connection");
while (1) {
	do {
		$paddr = accept(Client,Server);
		clean_db if ($do_clean);
	} until defined(Client);
	Client->autoflush(1);
	while (defined($line = <Client>)) {
    		chop $line;
		($op, $addr, $user) = split(' ', $line);
		syslog LOG_DEBUG, "$op $addr $user";
		if ($op =~ /^(ADD|DEL|TST|QUIT)$/) {
			$op = $1;
		} else {
			print Client "bad op '$op'\n";
		}
    		$cmd = '';
	    	if ($op eq 'ADD') {
			$addr = check_ip($addr);
			if (defined($user) && $user =~ /([-_\/\@\w.]*)$/) {
				$user = $1;
			} else {
				print client "Bad user $user\n";	
			}
      			$cmd = "/sbin/pfctl -q -t $table -T add $addr";
			$osapdb{$addr} = $user;
			syslog(LOG_INFO, "Connect $addr $user");
    		} elsif ($op eq 'DEL') {
			$addr = check_ip($addr);
      			$cmd = "/sbin/pfctl -q -t $table -T delete $addr";
			delete($osapdb{$addr});
			syslog(LOG_INFO, "Disconnect $addr");
    		} elsif ($op eq 'TST') {
			$addr = check_ip($addr);
			$result = $osapdb{$addr};
			syslog(LOG_DEBUG, "Test '$addr' -> $result");
			print Client "$result\n";
    		} elsif ($op eq 'QUIT') {
      			last;
    		} else {
      			print Client "unrecognized command '$line'\n";
    		}

    		if ($cmd ne '') {
			syslog(LOG_DEBUG, "executing $cmd");
			my $result = `$cmd 2>&1`;
			if ($result ne '') {
				print Client $result;
			} else {
				print Client "OK\n";
    			}
		}
	} # while
	$db->sync;
	syslog(LOG_DEBUG, "Done with one client\n");
	close(Client);
}
syslog(LOG_DEBUG, "for loop exited\n");
untie $osapdb;
exit(2);
